// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nkHVcN4BUDpfdi8hbJEDTZ
// Component: P3HYNzoYlczf

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: GMdLGo3RR1l-/component
import Card from "../../Card"; // plasmic-import: plSgmdi7ZcVl/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: nkHVcN4BUDpfdi8hbJEDTZ/projectcss
import sty from "./PlasmicHomepage2.module.css"; // plasmic-import: P3HYNzoYlczf/css

createPlasmicElementProxy;

export type PlasmicHomepage2__VariantMembers = {};
export type PlasmicHomepage2__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage2__VariantsArgs;
export const PlasmicHomepage2__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage2__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage2__ArgsType;
export const PlasmicHomepage2__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage2__OverridesType = {
  root?: Flex__<typeof PageLayout>;
  card?: Flex__<typeof Card>;
  text?: Flex__<"div">;
  table?: Flex__<typeof RichTable>;
};

export interface DefaultHomepage2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage2__RenderFunc(props: {
  variants: PlasmicHomepage2__VariantsArgs;
  args: PlasmicHomepage2__ArgsType;
  overrides: PlasmicHomepage2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "ovTntfQxkeakufGScPtCgm",
        opId: "0f63a6c1-0d69-4074-aca9-c231684ccebc",
        userArgs: {},
        cacheKey: `plasmic.$.0f63a6c1-0d69-4074-aca9-c231684ccebc.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage2.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage2.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage2.pageMetadata.title}
        />

        <link ref="canonical" href={PlasmicHomepage2.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <PageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
        >
          <Card
            data-plasmic-name={"card"}
            data-plasmic-override={overrides.card}
            className={classNames("__wab_instance", sty.card)}
            title={
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"bla bla bla"}
              </div>
            }
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.table),
                data: (() => {
                  try {
                    return $queries.query;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                fields: [
                  { key: "__airtable_id", fieldId: "__airtable_id" },
                  { key: "puan_f3a", fieldId: "puan_f3a" },
                  { key: "Notes", fieldId: "Notes" },
                  { key: "Durum_Notes", fieldId: "Durum_Notes" },
                  { key: "Hash", fieldId: "Hash" },
                  { key: "Etkinlik_id", fieldId: "Etkinlik_id" },
                  {
                    key: "etkinlik_brans_id (from Etkinlik_id)",
                    fieldId: "etkinlik_brans_id (from Etkinlik_id)"
                  },
                  {
                    key: "etkinlik_brans (from Etkinlik_id)",
                    fieldId: "etkinlik_brans (from Etkinlik_id)"
                  },
                  {
                    key: "etkinlik_sehir (from Etkinlik_id)",
                    fieldId: "etkinlik_sehir (from Etkinlik_id)"
                  },
                  {
                    key: "etkinlik_not (from Etkinlik_id)",
                    fieldId: "etkinlik_not (from Etkinlik_id)"
                  },
                  { key: "Name", fieldId: "Name" },
                  {
                    key: "etkinlik_il_temsilcisi_adi (from Etkinlik_id)",
                    fieldId: "etkinlik_il_temsilcisi_adi (from Etkinlik_id)"
                  },
                  { key: "Tckimlik", fieldId: "Tckimlik" },
                  {
                    key: "etkinlik_il_temsilcisi_telefon (from Etkinlik_id)",
                    fieldId: "etkinlik_il_temsilcisi_telefon (from Etkinlik_id)"
                  },
                  {
                    key: "etkinlik_il_temsilcisi_eposta (from Etkinlik_id)",
                    fieldId: "etkinlik_il_temsilcisi_eposta (from Etkinlik_id)"
                  },
                  {
                    key: "etkinlik_federasyon_gorevlisi_adi (from Etkinlik_id)",
                    fieldId:
                      "etkinlik_federasyon_gorevlisi_adi (from Etkinlik_id)"
                  },
                  {
                    key: "etkinlik_federasyon_gorevlisi_telefon (from Etkinlik_id)",
                    fieldId:
                      "etkinlik_federasyon_gorevlisi_telefon (from Etkinlik_id)"
                  },
                  {
                    key: "etkinlik_federasyon_gorevlisi_eposta (from Etkinlik_id)",
                    fieldId:
                      "etkinlik_federasyon_gorevlisi_eposta (from Etkinlik_id)"
                  },
                  {
                    key: "etkinlik_mhk_uyesi_adi (from Etkinlik_id)",
                    fieldId: "etkinlik_mhk_uyesi_adi (from Etkinlik_id)"
                  },
                  {
                    key: "etkinlik_mhk_uyesi_telefon (from Etkinlik_id)",
                    fieldId: "etkinlik_mhk_uyesi_telefon (from Etkinlik_id)"
                  },
                  {
                    key: "etkinlik_mhk_uyesi_eposta (from Etkinlik_id)",
                    fieldId: "etkinlik_mhk_uyesi_eposta (from Etkinlik_id)"
                  },
                  {
                    key: "etkinlik_brans_sorumlusu_adi (from Etkinlik_id)",
                    fieldId: "etkinlik_brans_sorumlusu_adi (from Etkinlik_id)"
                  },
                  {
                    key: "etkinlik_brans_sorumlusu_telefon (from Etkinlik_id)",
                    fieldId:
                      "etkinlik_brans_sorumlusu_telefon (from Etkinlik_id)"
                  },
                  {
                    key: "etkinlik_brans_sorumlusu_eposta (from Etkinlik_id)",
                    fieldId:
                      "etkinlik_brans_sorumlusu_eposta (from Etkinlik_id)"
                  },
                  {
                    key: "etkinlik_yerel_yetkili_adi (from Etkinlik_id)",
                    fieldId: "etkinlik_yerel_yetkili_adi (from Etkinlik_id)"
                  },
                  {
                    key: "etkinlik_yerel_yetkili_telefon (from Etkinlik_id)",
                    fieldId: "etkinlik_yerel_yetkili_telefon (from Etkinlik_id)"
                  },
                  { key: "Telefon", fieldId: "Telefon" },
                  {
                    key: "etkinlik_yerel_yetkili_eposta (from Etkinlik_id)",
                    fieldId: "etkinlik_yerel_yetkili_eposta (from Etkinlik_id)"
                  },
                  {
                    key: "etkinlik_tarihBasla (from Etkinlik_id)",
                    fieldId: "etkinlik_tarihBasla (from Etkinlik_id)"
                  },
                  {
                    key: "etkinlik_kayit_kapanis (from Etkinlik_id)",
                    fieldId: "etkinlik_kayit_kapanis (from Etkinlik_id)"
                  },
                  {
                    key: "etkinlik_form_adi (from Etkinlik_id)",
                    fieldId: "etkinlik_form_adi (from Etkinlik_id)"
                  },
                  { key: "puan_f3l_f3l", fieldId: "puan_f3l_f3l" },
                  { key: "puan_f3l_f5l", fieldId: "puan_f3l_f5l" },
                  { key: "puan_f3p", fieldId: "puan_f3p" },
                  { key: "puan_imac", fieldId: "puan_imac" },
                  { key: "puan_bursa_lastik", fieldId: "puan_bursa_lastik" },
                  { key: "puan_bursa_planor", fieldId: "puan_bursa_planor" },
                  { key: "puan_bursa_kagit", fieldId: "puan_bursa_kagit" },
                  { key: "puan_sivank_lastik", fieldId: "puan_sivank_lastik" },
                  { key: "puan_sivank_planor", fieldId: "puan_sivank_planor" },
                  { key: "puan_um_s1", fieldId: "puan_um_s1" },
                  { key: "puan_um_s2", fieldId: "puan_um_s2" },
                  { key: "puan_um_s3", fieldId: "puan_um_s3" },
                  { key: "puan_um_s4", fieldId: "puan_um_s4" },
                  { key: "puan_um_s5", fieldId: "puan_um_s5" },
                  { key: "puan_um_s6", fieldId: "puan_um_s6" },
                  { key: "puan_um_s7", fieldId: "puan_um_s7" },
                  { key: "puan_um_s8", fieldId: "puan_um_s8" },
                  { key: "puan_um_s9", fieldId: "puan_um_s9" },
                  { key: "puan_dr", fieldId: "puan_dr" },
                  { key: "kat_f3l", fieldId: "kat_f3l" },
                  { key: "kat_f3p", fieldId: "kat_f3p" },
                  { key: "kat_imac", fieldId: "kat_imac" },
                  { key: "kat_bursa", fieldId: "kat_bursa" },
                  { key: "kat_sivank", fieldId: "kat_sivank" },
                  { key: "kat_um", fieldId: "kat_um" },
                  { key: "dogum_tarihi", fieldId: "dogum_tarihi" },
                  { key: "takim", fieldId: "takim" },
                  { key: "Created", fieldId: "Created" },
                  { key: "Last Modified", fieldId: "Last Modified" },
                  {
                    key: "basvuru_degerlendirme",
                    fieldId: "basvuru_degerlendirme"
                  },
                  { key: "ebeveyn_adi", fieldId: "ebeveyn_adi" },
                  { key: "ebeveny_telefon", fieldId: "ebeveny_telefon" },
                  { key: "sorumluluk", fieldId: "sorumluluk" },
                  { key: "kulup_adi", fieldId: "kulup_adi" },
                  { key: "dr_telefon", fieldId: "dr_telefon" },
                  { key: "Calculated Age", fieldId: "Calculated Age" },
                  { key: "fai_lisansi", fieldId: "fai_lisansi" },
                  {
                    key: "etkinlik_id (from Etkinlik_id)",
                    fieldId: "etkinlik_id (from Etkinlik_id)"
                  },
                  { key: "email", fieldId: "email" },
                  { key: "basvuru_il", fieldId: "basvuru_il" },
                  {
                    key: "etkinlik_id (from Etkinlik_id) 2",
                    fieldId: "etkinlik_id (from Etkinlik_id) 2"
                  }
                ],
                onRowSelectionChanged: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "selectedRowKey",
                    ["table", "selectedRowKey"],
                    RichTable_Helpers
                  ).apply(null, eventArgs);
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "selectedRow",
                    ["table", "selectedRow"],
                    RichTable_Helpers
                  ).apply(null, eventArgs);
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "selectedRows",
                    ["table", "selectedRows"],
                    RichTable_Helpers
                  ).apply(null, eventArgs);
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "selectedRowKeys",
                    ["table", "selectedRowKeys"],
                    RichTable_Helpers
                  ).apply(null, eventArgs);
                },
                scopeClassName: sty["table__instance"],
                selectedRowKey: generateStateValueProp($state, [
                  "table",
                  "selectedRowKey"
                ]),
                selectedRowKeys: generateStateValueProp($state, [
                  "table",
                  "selectedRowKeys"
                ]),
                themeResetClassName: classNames(
                  projectcss.root_reset,
                  projectcss.root_reset_tags,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "selectedRowKey",
                    plasmicStateName: "table.selectedRowKey"
                  },
                  {
                    name: "selectedRow",
                    plasmicStateName: "table.selectedRow"
                  },
                  {
                    name: "selectedRows",
                    plasmicStateName: "table.selectedRows"
                  },
                  {
                    name: "selectedRowKeys",
                    plasmicStateName: "table.selectedRowKeys"
                  }
                ],
                [],
                RichTable_Helpers ?? {},
                child$Props
              );

              return (
                <RichTable
                  data-plasmic-name={"table"}
                  data-plasmic-override={overrides.table}
                  {...child$Props}
                />
              );
            })()}
          </Card>
        </PageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "card", "text", "table"],
  card: ["card", "text", "table"],
  text: ["text"],
  table: ["table"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof PageLayout;
  card: typeof Card;
  text: "div";
  table: typeof RichTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage2__VariantsArgs;
    args?: PlasmicHomepage2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage2__ArgProps,
          internalVariantPropNames: PlasmicHomepage2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage2";
  } else {
    func.displayName = `PlasmicHomepage2.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "nkHVcN4BUDpfdi8hbJEDTZ"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHomepage2 = Object.assign(
  // Top-level PlasmicHomepage2 renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    card: makeNodeComponent("card"),
    text: makeNodeComponent("text"),
    table: makeNodeComponent("table"),

    // Metadata about props expected for PlasmicHomepage2
    internalVariantProps: PlasmicHomepage2__VariantProps,
    internalArgProps: PlasmicHomepage2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Table Test View",
      description: "",
      ogImageSrc: "",
      canonical: "https://uhs.plasmic.run/table"
    }
  }
);

export default PlasmicHomepage2;
/* prettier-ignore-end */
